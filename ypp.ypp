%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM NUM STR DOC		/* symbol number 'string' "docstring"	*/
%token <o> LP RP LQ RQ LC RC	/* brackets: () [] {}					*/
%token <o> EQ AT TILD COLON		/* operators: = @ ~ : 					*/
%token <o> MAP					/* operators: |							*/
%token <o> LESS GREAT			/* operators: < >						*/
%token <o> ADD SUB MUL DIV POW	/* operators: + - * / ^					*/
%type <o> ex scalar vector		/* expression scalar [vec tor]			*/

%right EQ
%left ADD SUB
%left MUL DIV
%left POW
%right AT
%left MAP
%left TILD
%%
REPL : | REPL ex { cout << $2->eval()->dump() << endl; } ;
scalar : SYM | NUM | STR ;
ex : scalar
	| LP ex RP		{ $$=$2; }
	| LQ vector RQ	{ $$=$2; }
	| TILD ex		{ $$=$1; $$->push($2); }
	| ex EQ ex		{ $$=$2; $$->push($1); $$->push($3); } 
	| ex AT ex		{ $$=$2; $$->push($1); $$->push($3); } 
	| ex ADD ex		{ $$=$2; $$->push($1); $$->push($3); } 
	| ex SUB ex		{ $$=$2; $$->push($1); $$->push($3); } 
	| ex MUL ex		{ $$=$2; $$->push($1); $$->push($3); } 
	| ex DIV ex		{ $$=$2; $$->push($1); $$->push($3); } 
	| ex POW ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex MAP ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex COLON ex GREAT ex	{ $$=new Dep($1,$3,$5); }
;
vector :			{ $$=new Vector(); }
	| vector ex		{ $$=$1; $$->push($2); }
;
%%